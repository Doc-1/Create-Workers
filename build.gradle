plugins {
    id 'eclipse'
    id 'idea'    
	id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group= "net._doc" + project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

project.evaluationDependsOn(":CreativeCore")
sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft {
	mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    
	runs {
        client {
            taskName "cw_client"
            workingDirectory project.file('run')
			
            property 'forge.logging.console.level', 'debug'
            arg '--mixin.config'
            arg 'creativecore.mixins.json'
            arg '--mixin.config'
            arg 'creativecore.forge.mixins.json'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', mod_id
            mods {
                creativecore {
                    source project(':CreativeCore').sourceSets.main
                }
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName "cw_server"
            workingDirectory project.file('run')
            
			property 'forge.logging.console.level', 'debug'
            arg '--mixin.config'
            arg 'creativecore.mixins.json'
            arg '--mixin.config'
            arg 'creativecore.forge.mixins.json'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', mod_id
            mods {
                creativecore {
                    source project(':CreativeCore').sourceSets.main
                }
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        
         data {
            taskName "cw_data"
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            arg '--mixin.config'
            arg 'creativecore.mixins.json'
            arg '--mixin.config'
            arg 'creativecore.forge.mixins.json'
            
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', mod_id
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
   			mods {
                creativecore {
                    source project(':CreativeCore').sourceSets.main
                }
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
    
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
    // location of the maven that hosts JEI files before January 2023
    	name = "Progwml6's maven"
    	url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
	    // location of the maven that hosts JEI files since January 2023
	    name = "Jared's maven"
	    url = "https://maven.blamejared.com/"
	}
	maven {
	    // location of a maven mirror for JEI files, as a fallback
	    name = "ModMaven"
	    url = "https://modmaven.dev"
	}
	
}   
dependencies {
    minecraft "net.minecraftforge:forge:${project.property 'minecraft_version'}-${project.property 'forge_version'}"
    
    implementation project(':CreativeCore')
	
  	implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    
    
	// compile against the JEI API but do not include it at runtime
	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
	// at runtime, use the full JEI jar for Forge
	runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))  	
	
 	
}

modDependencies = [
    [ modId: "creativecore", mandatory: true, ordering: "NONE", side: "BOTH", versionRange: creativecore_version ]
]

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveFileName.set(project.mod_file_name + "_FORGE_v" + project.mod_version + "_mc" + project.minecraft_version + ".jar")
    manifest {
        attributes([
            "Specification-Title": project.mod_name,
            "Specification-Vendor": project.mod_authors,
            "Specification-Version": project.mod_version,
            "Implementation-Title": project.mod_name,
            "Implementation-Version"  : project.mod_version,
            "Implementation-Vendor": project.mod_authors,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
